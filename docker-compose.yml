version: '3.8'

services:
  users:
    build:
      context: ./users
      dockerfile: ../Dockerfile  # Usa el mismo Dockerfile para todos
    container_name: users
    volumes:
      - ./users:/app
    ports:
      - "8000:8000"  # Puerto del host mapeado al contenedor
    command: ["gunicorn", "app:app", "--bind", "0.0.0.0:8000"]

  microservicio_1:
    build:
      context: ./microservicio_1
      dockerfile: ../Dockerfile  # Usa el mismo Dockerfile para todos
    container_name: microservicio_1
    depends_on:
      - db
    volumes:
      - ./microservicio_1:/app
    ports:
      - "8001:8001"  # Puerto del host diferente
    command: ["gunicorn", "app:app", "--bind", "0.0.0.0:8001"]

  celery_microservicio_1:
    build:
      context: ./microservicio_1
      dockerfile: ../Dockerfile  # Usa el mismo Dockerfile para todos
    container_name: celery_microservicio_1
    depends_on:
      - db
      - redis
    volumes:
      - ./microservicio_1:/app  # Monta el código de la misma manera
    command: ["celery", "-A", "tareas", "worker", "--loglevel=info"]

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - users
      - microservicio_1

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fpv
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Monta un volumen para la persistencia de datos

  redis:
    image: redis:latest
    ports:
      - "6379:6379"

# Definición de volúmenes
volumes:
  postgres_data:
